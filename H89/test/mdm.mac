;C/80 Compiler 3.1 (4/11/84) - (c) 1984 The Software Toolworks

	DSEG
ticks::	DW	0
baudrat::	DW	0
port::	DB	0
fastFla::	DB	0
baud::	DW	0
rcvbuf::	DW	0
rcvptr::	DW	0
statlin::	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	EXTRN	tranSiz
	EXTRN	xyModem
	EXTRN	Curstr
	EXTRN	RetCur
	EXTRN	SaveCur
	EXTRN	ClrEOL
	EXTRN	ClrScr
	EXTRN	On25
	EXTRN	Off25

	PUBLIC	main
.d:	DW	0
.e:	DW	0
.f:	DW	0
	CSEG

main:	LXI	H,-257
	DAD	SP
	SPHL
	LHLD	.e
	PUSH	H
	LHLD	.d
	PUSH	H
	LXI	H,0
	MOV	A,H
	ORA	L
	JNZ	.g
	CALL	slow
.g:	CALL	init
.j:	LXI	H,4
	DAD	SP
	PUSH	H
	CALL	GetOpti
	POP	D
	MOV	A,L
	STAX	D
	JMP	.l
.m:	CALL	SetBaud
	JMP	.k
.n:	LXI	H,4
	DAD	SP
	MOV	L,M
	MVI	H,0
	PUSH	H
	CALL	Termina
	POP	B
	JMP	.k
.o:	LXI	H,4
	DAD	SP
	MOV	L,M
	MVI	H,0
	PUSH	H
	CALL	Termina
	POP	B
	JMP	.k
.p:	CALL	Confere
	JMP	.k
.q:	CALL	ReadFil
	JMP	.k
.r:	CALL	SendFil
	JMP	.k
.s:	CALL	SetYmod
	JMP	.k
.t:	CALL	Hangup
	JMP	.k
.u:	CALL	DebugOp
	JMP	.k
.v:	CALL	Fast
	JMP	.k
	JMP	.k
.l:	CALL	.switch##
	DW	.m,79
	DW	.n,69
	DW	.o,84
	DW	.p,67
	DW	.q,82
	DW	.r,83
	DW	.s,89
	DW	.t,72
	DW	.u,68
	DW	.v,52
	DW	0
.k:	DS	0
.h:	LXI	H,4
	DAD	SP
	MOV	L,M
	MVI	H,0
	LXI	D,-88
	DAD	D
	MOV	A,H
	ORA	L
	JNZ	.j
.i:	LXI	H,Off25
	PUSH	H
	CALL	puts
	POP	B
	LXI	H,0
	MOV	A,H
	ORA	L
	JNZ	.w
	CALL	fast
.w:	LXI	H,0
.x:	XCHG
	POP	H
	SHLD	.d
	POP	H
	SHLD	.e
	LXI	H,257
	DAD	SP
	SPHL
	XCHG
	RET

	PUBLIC	GetOpti

GetOpti:	DCX	SP
	CALL	FlushCo
	CALL	prnt_1
	LXI	H,.c
	PUSH	H
	LXI	H,.c+13
	PUSH	H
	CALL	prnt_2
	POP	B
	POP	B
	CALL	prnt_1
	LXI	H,.c+39
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	prnt_1
	LXI	H,.c+50
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	prnt_1
	LXI	H,.c+72
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	prnt_1
	LXI	H,.c+91
	PUSH	H
	LHLD	tranSiz
	PUSH	H
	CALL	prnt_2
	POP	B
	POP	B
	LHLD	xyModem
	MVI	H,0
	LXI	D,-88
	DAD	D
	MOV	A,H
	ORA	L
	JNZ	.y
	CALL	prnt_1
	LXI	H,.c+126
	PUSH	H
	CALL	prnt_2
	POP	B
	JMP	.z
.y:	CALL	prnt_1
	LXI	H,.c+135
	PUSH	H
	CALL	prnt_2
	POP	B
.z:	CALL	prnt_1
	LXI	H,.c+144
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	prnt_1
	LXI	H,.c+165
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	prnt_1
	LXI	H,.c+196
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	prnt_1
	LXI	H,.c+221
	PUSH	H
	LHLD	baud
	PUSH	H
	LHLD	port
	MVI	H,0
	PUSH	H
	CALL	prnt_2
	POP	B
	POP	B
	POP	B
	CALL	prnt_1
	LXI	H,.c+258
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	prnt_1
	LXI	H,.c+285
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	prnt_1
	LXI	H,.c+307
	PUSH	H
	CALL	prnt_2
	POP	B
.cb:	LXI	H,0
	DAD	SP
	PUSH	H
	CALL	GetCon
	PUSH	H
	CALL	toupper
	POP	B
	POP	D
	MOV	A,L
	STAX	D
.ab:	LXI	H,0
	DAD	SP
	MOV	L,M
	MVI	H,0
	MOV	A,H
	ORA	L
	JZ	.cb
.bb:	LXI	H,10
	PUSH	H
	CALL	putchar
	POP	B
	LXI	H,0
	DAD	SP
	MOV	L,M
	MVI	H,0
.db:	INX	SP
	RET
.c:
	DB	10
	DB	10
	DB	'Modem, %s'
	DB	10
	DB	0
	DB	'H-89 HDOS 1.0 17 May 2023'
	DB	0
	DB	'Options:'
	DB	10
	DB	10
	DB	0
	DB	'  R - receive a file'
	DB	10
	DB	0
	DB	'  S - send a file'
	DB	10
	DB	0
	DB	'  Y - X/Ymodem Options (Block %d, '
	DB	0
	DB	'Xmodem)'
	DB	10
	DB	0
	DB	'Ymodem)'
	DB	10
	DB	0
	DB	'  T - terminal mode'
	DB	10
	DB	0
	DB	'  E - terminal mode with Echo'
	DB	10
	DB	0
	DB	'  H - hang up the phone'
	DB	10
	DB	0
	DB	'  O - option configuration (%d, %x)'
	DB	10
	DB	0
	DB	'  D - Debug Speed options'
	DB	10
	DB	0
	DB	'  X - exit to system'
	DB	10
	DB	0
	DB	10
	DB	'which ? '
	DB	0

	PUBLIC	DebugOp

DebugOp:	PUSH	B
	LXI	H,0
	DAD	SP
	INX	H
	MVI	M,0
.hb:	CALL	prnt_1
	LXI	H,.eb
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	prnt_1
	LXI	H,.eb+29
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	prnt_1
	LXI	H,.eb+59
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	prnt_1
	LXI	H,.eb+95
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	prnt_1
	LXI	H,.eb+114
	PUSH	H
	CALL	prnt_2
	POP	B
.kb:	LXI	H,0
	DAD	SP
	PUSH	H
	CALL	GetCon
	PUSH	H
	CALL	toupper
	POP	B
	POP	D
	MOV	A,L
	STAX	D
.ib:	LXI	H,0
	DAD	SP
	MOV	L,M
	MVI	H,0
	MOV	A,H
	ORA	L
	JZ	.kb
.jb:	DS	0
.fb:	LXI	H,.eb+130
	PUSH	H
	LXI	H,2
	DAD	SP
	PUSH	H
	CALL	index
	POP	B
	POP	B
	INX	H
	MOV	A,H
	ORA	L
	JZ	.hb
.gb:	LXI	H,0
	DAD	SP
	MOV	L,M
	MVI	H,0
	JMP	.mb
.nb:	CALL	Slow
	LXI	H,0
	MOV	A,L
	STA	fastFla
	JMP	.lb
.ob:	CALL	Fast
	LXI	H,1
	MOV	A,L
	STA	fastFla
	JMP	.lb
.pb:	LHLD	fastFla
	MVI	H,0
	MOV	A,H
	ORA	L
	JNZ	.qb
	LHLD	fastFla
	MVI	H,0
	INX	H
	MOV	A,L
	STA	fastFla
	DCX	H
	CALL	Fast
	JMP	.rb
.qb:	LXI	H,0
	MOV	A,L
	STA	fastFla
	CALL	Slow
.rb:	CALL	prnt_1
	LXI	H,.eb+135
	PUSH	H
	LHLD	fastFla
	MVI	H,0
	PUSH	H
	CALL	prnt_2
	POP	B
	POP	B
	JMP	.lb
	JMP	.lb
.mb:	CALL	.switch##
	DW	.nb,50
	DW	.ob,52
	DW	.pb,83
	DW	0
.lb:	LXI	H,0
.sb:	POP	B
	RET
.eb:
	DB	10
	DB	'  2 - Slow Speed Operation'
	DB	10
	DB	0
	DB	'    4 - Fast Speed Operation'
	DB	10
	DB	0
	DB	'    S - Only slow for Serial Reads'
	DB	10
	DB	0
	DB	'    0 - Exit Menu'
	DB	10
	DB	0
	DB	'    Which?    '
	DB	10
	DB	0
	DB	'24S0'
	DB	0
	DB	'FastFlag %d'
	DB	10
	DB	0

	PUBLIC	Stat25

Stat25:	LXI	H,SaveCur
	PUSH	H
	CALL	puts
	POP	B
	LXI	H,On25
	PUSH	H
	CALL	puts
	POP	B
	LXI	H,1
	PUSH	H
	LXI	H,25
	PUSH	H
	CALL	gotoXY
	POP	B
	POP	B
	CALL	prnt_1
	LXI	H,.tb
	PUSH	H
	LXI	H,13
	PUSH	H
	LXI	H,27
	PUSH	H
	LXI	H,statlin
	PUSH	H
	LXI	H,27
	PUSH	H
	LXI	H,27
	PUSH	H
	CALL	prnt_2
	XCHG
	LXI	H,12
	DAD	SP
	SPHL
	XCHG
	LXI	H,RetCur
	PUSH	H
	CALL	puts
	POP	B
	CALL	set_cli
	RET
.tb:
	DB	'%c%cp%s%cq%cK'
	DB	0
	DSEG
.vb:	DW	0

	PUBLIC	co_inch
.wb:	DW	0
	CSEG

co_inch:	LHLD	.wb
	PUSH	H
	CALL	Istatus
	MOV	A,H
	ORA	L
	JZ	.xb
	CALL	rcvchar
	MVI	H,0
	MOV	A,L
	ANI	127
	MOV	L,A
	SHLD	.wb
	LHLD	.vb
	DCX	H
	MOV	A,H
	ORA	L
	JNZ	.yb
	LXI	H,0
	SHLD	.vb
	LXI	H,RetCur
	PUSH	H
	CALL	puts
	POP	B
.yb:	LHLD	.wb
	LXI	D,-27
	DAD	D
	MOV	A,H
	ORA	L
	JZ	.zb
	LHLD	.wb
	PUSH	H
	CALL	putchar
	POP	B
.zb:	DS	0
.xb:	DS	0
.ac:	POP	H
	SHLD	.wb
	RET

	PUBLIC	Confere
	DSEG
.bc:	DB	0
.cc:	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0
.dc:	DW	0
.ec:	DW	0
.fc:	DW	0
.gc:	DW	0
.hc:	DW	0
	CSEG

Confere:	LXI	H,ClrScr
	PUSH	H
	CALL	puts
	POP	B
	LXI	H,1
	SHLD	.fc
	LXI	H,25
	SHLD	.gc
	LXI	H,0
	SHLD	.vb
	LXI	H,1
	PUSH	H
	LXI	H,3
	PUSH	H
	CALL	gotoXY
	POP	B
	POP	B
	CALL	prnt_1
	LXI	H,.ub
	PUSH	H
	CALL	prnt_2
	POP	B
.kc:	CALL	co_inch
	CALL	GetCon
	MOV	A,L
	STA	.bc
	CALL	e.0##
	JZ	.mc
	LHLD	.bc
	MVI	H,0
	LXI	D,-5
	DAD	D
	CALL	e.0##
.mc:	CALL	e.0##
	JZ	.lc
	LHLD	.vb
	MOV	A,H
	ORA	L
	JNZ	.nc
	LXI	H,SaveCur
	PUSH	H
	CALL	puts
	POP	B
	LXI	H,1
	SHLD	.vb
	LXI	H,On25
	PUSH	H
	CALL	puts
	POP	B
.nc:	LHLD	.bc
	MVI	H,0
	LXI	D,-8
	DAD	D
	MOV	A,H
	ORA	L
	JNZ	.oc
	LHLD	.fc
	LXI	D,32766
	MOV	A,H
	XRI	128
	MOV	H,A
	DAD	D
	JNC	.pc
	LHLD	.fc
	DCX	H
	SHLD	.fc
	PUSH	H
	LHLD	.gc
	PUSH	H
	CALL	gotoXY
	POP	B
	POP	B
.pc:	LXI	H,32
	PUSH	H
	CALL	putchar
	POP	B
	JMP	.qc
.oc:	LHLD	.fc
	PUSH	H
	LHLD	.gc
	PUSH	H
	CALL	gotoXY
	POP	B
	POP	B
	LHLD	.fc
	DCX	H
	MOV	A,H
	ORA	L
	JNZ	.rc
	LXI	H,ClrEOL
	PUSH	H
	CALL	puts
	POP	B
.rc:	LHLD	.fc
	INX	H
	SHLD	.fc
	DCX	H
	LXI	D,.cc
	DAD	D
	PUSH	H
	LHLD	.bc
	MVI	H,0
	POP	D
	MOV	A,L
	STAX	D
.qc:	LHLD	.bc
	MVI	H,0
	PUSH	H
	CALL	putchar
	POP	B
	LHLD	.bc
	MVI	H,0
	LXI	D,-13
	DAD	D
	CALL	c.not##
	JNZ	.tc
	LHLD	.fc
	LXI	D,80
	CALL	c.lt##
.tc:	CALL	e.0##
	JZ	.sc
	LXI	H,1
	SHLD	.hc
.wc:	LHLD	.fc
	XCHG
	LHLD	.hc
	CALL	c.gt##
	JZ	.vc
	JMP	.xc
.uc:	LHLD	.hc
	INX	H
	SHLD	.hc
	DCX	H
	JMP	.wc
.xc:	LHLD	.hc
	LXI	D,.cc
	DAD	D
	MOV	L,M
	MVI	H,0
	PUSH	H
	CALL	Send
	POP	B
	CALL	co_inch
	JMP	.uc
.vc:	LXI	H,1
	SHLD	.fc
	LHLD	.bc
	MVI	H,0
	LXI	D,-13
	DAD	D
	MOV	A,H
	ORA	L
	JZ	.yc
	LXI	H,13
	PUSH	H
	CALL	Send
	POP	B
.yc:	DS	0
.sc:	DS	0
.lc:	DS	0
.ic:	LHLD	.bc
	MVI	H,0
	LXI	D,-5
	DAD	D
	MOV	A,H
	ORA	L
	JNZ	.kc
.jc:	LXI	H,1
	PUSH	H
	LXI	H,25
	PUSH	H
	CALL	gotoXY
	POP	B
	POP	B
	LXI	H,ClrEOL
	PUSH	H
	CALL	puts
	POP	B
	LXI	H,Off25
	PUSH	H
	CALL	puts
	POP	B
	LXI	H,RetCur
	PUSH	H
	CALL	puts
	POP	B
	CALL	set_cli
	RET
.ub:
	DB	10
	DB	'Use ctrl-E to exit Conference mode.'
	DB	10
	DB	10
	DB	0

	PUBLIC	Hangup

Hangup:	CALL	ResetDT
	RET

	PUBLIC	init

init:	LXI	H,8219
	SHLD	ticks
	LXI	H,6
	SHLD	baudrat
	LXI	H,19200
	SHLD	baud
	LXI	H,216
	MOV	A,L
	STA	port
	LXI	H,1
	MOV	A,L
	STA	fastFla
	LXI	H,4352
	PUSH	H
	CALL	alloc
	POP	B
	SHLD	rcvbuf
	LHLD	rcvbuf
	SHLD	rcvptr
	LHLD	rcvbuf
	INX	H
	MOV	A,H
	ORA	L
	JNZ	.ad
	CALL	prnt_1
	LXI	H,.zc
	PUSH	H
	CALL	prnt_2
	POP	B
	CALL	exit
.ad:	LHLD	baudrat
	PUSH	H
	CALL	Setup
	POP	B
	LXI	H,statlin
	PUSH	H
	LXI	H,.zc+32
	PUSH	H
	CALL	strcpy
	POP	B
	POP	B
	CALL	Stat25
	CALL	set_cli
	RET
.zc:
	DB	'Not enough memory - TERMINATED'
	DB	10
	DB	0
	DB	'19200       8N1 D8'
	DB	0

	PUBLIC	writebu
	DSEG
.cd:	DW	0
	CSEG

writebu:	LXI	H,19
	PUSH	H
	CALL	Send
	POP	B
.dd:	LHLD	rcvptr
	PUSH	H
	LHLD	rcvbuf
	CALL	s.##
	XCHG
	LXI	H,512
	CALL	c.div##
	XCHG
	CALL	e.0##
	JZ	.ed
	LHLD	rcvptr
	INX	H
	SHLD	rcvptr
	DCX	H
	MVI	M,0
	JMP	.dd
.ed:	CALL	prnt_1
	LXI	H,.bd
	PUSH	H
	LHLD	rcvptr
	PUSH	H
	LHLD	rcvbuf
	CALL	s.##
	PUSH	H
	CALL	prnt_2
	POP	B
	POP	B
	LXI	H,2
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	PUSH	H
	LHLD	rcvbuf
	PUSH	H
	LHLD	rcvptr
	PUSH	H
	LHLD	rcvbuf
	CALL	s.##
	PUSH	H
	CALL	write
	POP	B
	POP	B
	POP	B
	SHLD	.cd
	LHLD	rcvptr
	PUSH	H
	LHLD	rcvbuf
	CALL	s.##
	PUSH	H
	LHLD	.cd
	CALL	n.##
	JZ	.fd
	CALL	prnt_1
	LXI	H,.bd+20
	PUSH	H
	LHLD	.cd
	PUSH	H
	CALL	prnt_2
	POP	B
	POP	B
.fd:	LHLD	rcvbuf
	SHLD	rcvptr
	LXI	H,17
	PUSH	H
	CALL	Send
	POP	B
	RET
.bd:
	DB	10
	DB	'Writing %d bytes.'
	DB	10
	DB	0
	DB	10
	DB	'File Write ERROR! Only %d bytes written'
	DB	10
	DB	0

	PUBLIC	Term

Term:	DS	0
;#asm
DataPort  equ 0d8h
MCntPort  equ DataPort + 4
LCntPort  equ DataPort + 3
StPort      equ DataPort + 5
MStPort   equ DataPort + 6
IStPort   equ DataPort + 2   ;        
TxMask     equ 20h      ;        
RXMask     equ 1
    .z80
    di
Loop:    call GetData          ; check if computer sent anything & transmit
    jr   z, console
    call pcon
console:
    call  GetCon
    ld    a,l
    and    a
    jr   z, loop
    ld   b, 5         ; ^E
    cp   b
    jr   z, cleanup
    call  DataOut
    jr   Loop          ; Loop forever
cleanup:
    ei
    ret
GetData:in    a,( StPort )
    and    RxMask
    ret    z         ; No data so return
    in    a,(DataPort)
    and    a        ; set the flags
    ret
;
;
DataOut:push    af
DataO1: in    a,( StPort )      ; Check Status
    and    TxMask
    jr    z,DataO1      ; Loop until Ready
    pop    af          ; Get the data
    out    ( DataPort ),a      ; ans send it
    ret
;
;
pcon:
    push    af
putc1:    in    a,(0E8H +5)    ; check console status
    and    20h
    jr    z,putc1     ; loop until console ready
    pop    af
    out    (0E8H ),a
    ret
;************************
; getcon - gets char from console
gcon:
    in    a,(0E8H +5)    ; check console status
    and    1
    ret    z            ; return 0 if no char
    in    a, (0E8H )
    and    a        ; set the flags
    ret
    .8080
;#endasm
	RET

	PUBLIC	Termina
	DSEG
.hd:	DW	0
.id:	DW	0
.jd:	DW	0
.kd:	DW	0
.ld:	DW	0
.md:	DW	0
	CSEG

Termina:	LXI	H,-26
	DAD	SP
	SPHL
	LHLD	.md
	PUSH	H
	LHLD	.ld
	PUSH	H
	LXI	H,6
	DAD	SP
	MVI	M,20
	LXI	H,0
	SHLD	.ld
	LXI	H,0
	SHLD	.hd
	LXI	H,0
	SHLD	.kd
	LXI	H,0
	SHLD	.id
	CALL	prnt_1
	LXI	H,.gd
	PUSH	H
	CALL	prnt_2
	POP	B
	LXI	H,32
	DAD	SP
	MOV	L,M
	MVI	H,0
	LXI	D,-69
	DAD	D
	MOV	A,H
	ORA	L
	JNZ	.nd
	CALL	prnt_1
	LXI	H,.gd+37
	PUSH	H
	CALL	prnt_2
	POP	B
.nd:	DS	0
.qd:	LXI	H,28
	DAD	SP
	PUSH	H
	CALL	rcvchar
	POP	D
	MOV	A,L
	STAX	D
	INX	H
	CALL	e.0##
	JZ	.rd
	LHLD	.hd
	MOV	A,H
	ORA	L
	JZ	.sd
	LHLD	rcvptr
	INX	H
	SHLD	rcvptr
	DCX	H
	PUSH	H
	LXI	H,30
	DAD	SP
	MOV	L,M
	MVI	H,0
	POP	D
	MOV	A,L
	STAX	D
	LHLD	rcvptr
	PUSH	H
	LHLD	rcvbuf
	CALL	s.##
	LXI	D,-4096
	DAD	D
	CALL	c.not##
	JZ	.td
	CALL	writebu
.td:	DS	0
.sd:	LXI	H,28
	DAD	SP
	PUSH	H
	LXI	H,30
	DAD	SP
	MOV	L,M
	MVI	H,0
	MVI	H,0
	MOV	A,L
	ANI	127
	MOV	L,A
	POP	D
	MOV	A,L
	STAX	D
	LXI	H,28
	DAD	SP
	MOV	L,M
	MVI	H,0
	PUSH	H
	CALL	putchar
	POP	B
	LXI	H,32
	DAD	SP
	MOV	L,M
	MVI	H,0
	LXI	D,-69
	DAD	D
	MOV	A,H
	ORA	L
	JNZ	.ud
	LXI	H,28
	DAD	SP
	MOV	L,M
	MVI	H,0
	PUSH	H
	CALL	Send
	POP	B
.ud:	DS	0
.rd:	LXI	H,29
	DAD	SP
	PUSH	H
	CALL	GetCon
	POP	D
	MOV	A,L
	STAX	D
	CALL	e.0##
	JZ	.wd
	LXI	H,29
	DAD	SP
	MOV	L,M
	MVI	H,0
	LXI	D,-5
	DAD	D
	CALL	e.0##
.wd:	CALL	e.0##
	JZ	.vd
	LHLD	.kd
	CALL	c.not##
	JZ	.yd
	LXI	H,29
	DAD	SP
	MOV	L,M
	MVI	H,0
	LXI	D,-27
	DAD	D
	CALL	c.not##
.yd:	CALL	e.0##
	JZ	.xd
	LXI	H,1
	SHLD	.kd
	CALL	prnt_1
	LXI	H,.gd+48
	PUSH	H
	CALL	prnt_2
	POP	B
.xd:	LHLD	.kd
	DCX	H
	CALL	c.not##
	JZ	.ae
	LXI	H,29
	DAD	SP
	MOV	L,M
	MVI	H,0
	LXI	D,-80
	DAD	D
	CALL	c.not##
.ae:	CALL	e.0##
	JZ	.zd
	LXI	H,.hd
	PUSH	H
	LXI	H,.id
	PUSH	H
	CALL	CapBuf
	POP	B
	POP	B
	LXI	H,2
	SHLD	.kd
.zd:	LXI	H,6
	DAD	SP
	MOV	L,M
	MVI	H,0
	PUSH	H
	LXI	H,31
	DAD	SP
	MOV	L,M
	MVI	H,0
	CALL	e.##
	JZ	.be
	LHLD	.ld
	MOV	A,H
	ORA	L
	JZ	.ce
	CALL	prnt_1
	LXI	H,.gd+60
	PUSH	H
	CALL	prnt_2
	POP	B
	LXI	H,0
	SHLD	.ld
	JMP	.de
.ce:	CALL	ResetDT
	CALL	prnt_1
	LXI	H,.gd+82
	PUSH	H
	CALL	prnt_2
	POP	B
	LXI	H,1
	SHLD	.ld
.de:	DS	0
.be:	LHLD	.kd
	CALL	c.not##
	JZ	.fe
	LXI	H,6
	DAD	SP
	MOV	L,M
	MVI	H,0
	PUSH	H
	LXI	H,31
	DAD	SP
	MOV	L,M
	MVI	H,0
	CALL	n.##
.fe:	CALL	e.0##
	JZ	.ee
	LXI	H,29
	DAD	SP
	MOV	L,M
	MVI	H,0
	PUSH	H
	CALL	Send
	POP	B
	LXI	H,29
	DAD	SP
	MOV	L,M
	MVI	H,0
	LXI	D,-13
	DAD	D
	MOV	A,H
	ORA	L
	JNZ	.ge
	LXI	H,29
	DAD	SP
	MVI	M,10
	LXI	H,29
	DAD	SP
	MOV	L,M
	MVI	H,0
	PUSH	H
	CALL	putchar
	POP	B
	LXI	H,29
	DAD	SP
	MOV	L,M
	MVI	H,0
	PUSH	H
	CALL	Send
	POP	B
.ge:	LHLD	.hd
	MOV	A,H
	ORA	L
	JZ	.he
	LHLD	rcvptr
	INX	H
	SHLD	rcvptr
	DCX	H
	PUSH	H
	LXI	H,31
	DAD	SP
	MOV	L,M
	MVI	H,0
	POP	D
	MOV	A,L
	STAX	D
	LHLD	rcvptr
	PUSH	H
	LHLD	rcvbuf
	CALL	s.##
	LXI	D,-4096
	DAD	D
	CALL	c.not##
	JZ	.ie
	CALL	writebu
.ie:	LXI	H,29
	DAD	SP
	MOV	L,M
	MVI	H,0
	LXI	D,-13
	DAD	D
	MOV	A,H
	ORA	L
	JNZ	.je
	LHLD	rcvptr
	INX	H
	SHLD	rcvptr
	DCX	H
	MVI	M,10
	LHLD	rcvptr
	PUSH	H
	LHLD	rcvbuf
	CALL	s.##
	LXI	D,-4096
	DAD	D
	CALL	c.not##
	JZ	.ke
	CALL	writebu
.ke:	DS	0
.je:	DS	0
.he:	DS	0
.ee:	LHLD	.kd
	DCX	H
	DCX	H
	MOV	A,H
	ORA	L
	JNZ	.le
	LXI	H,0
	SHLD	.kd
.le:	DS	0
.vd:	DS	0
.od:	LXI	H,29
	DAD	SP
	MOV	L,M
	MVI	H,0
	LXI	D,-5
	DAD	D
	MOV	A,H
	ORA	L
	JNZ	.qd
.pd:	LHLD	.hd
	MOV	A,H
	ORA	L
	JZ	.me
	CALL	writebu
	LHLD	.id
	PUSH	H
	CALL	fclose
	POP	B
	CALL	prnt_1
	LXI	H,.gd+105
	PUSH	H
	LXI	H,9
	DAD	SP
	PUSH	H
	CALL	prnt_2
	POP	B
	POP	B
.me:	DS	0
.ne:	POP	H
	SHLD	.ld
	POP	H
	SHLD	.md
	LXI	H,26
	DAD	SP
	SPHL
	RET
.gd:
	DB	10
	DB	'Use ctrl-E to exit terminal mode.'
	DB	10
	DB	10
	DB	0
	DB	'Echo Mode'
	DB	10
	DB	0
	DB	'Function 1'
	DB	10
	DB	0
	DB	' Set CTS, Start Data'
	DB	10
	DB	0
	DB	' Reset CTS, Stop Data'
	DB	10
	DB	0
	DB	10
	DB	'Closing Capture File: %s'
	DB	10
	DB	0

	PUBLIC	CapBuf
	DSEG
.pe:	DW	0
	CSEG

CapBuf:	LXI	H,-20
	DAD	SP
	SPHL
	LHLD	.pe
	PUSH	H
	LXI	H,26
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	MOV	A,H
	ORA	L
	JZ	.qe
	LXI	H,26
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	MVI	M,0
	INX	H
	MVI	M,0
	LHLD	rcvptr
	PUSH	H
	LHLD	rcvbuf
	CALL	s.##
	LXI	D,0
	CALL	c.lt##
	JZ	.re
	LXI	H,24
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	PUSH	H
	CALL	writebu
	POP	B
	LXI	H,24
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	PUSH	H
	CALL	fclose
	POP	B
	CALL	prnt_1
	LXI	H,.oe
	PUSH	H
	CALL	prnt_2
	POP	B
	LXI	H,0
	MOV	A,L
	STA	statlin+16
	CALL	Stat25
.re:	JMP	.se
.qe:	LXI	H,26
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	MVI	M,1
	INX	H
	MVI	M,0
	LHLD	rcvbuf
	SHLD	rcvptr
	CALL	FlushCo
	CALL	prnt_1
	LXI	H,.oe+23
	PUSH	H
	CALL	prnt_2
	POP	B
	LXI	H,2
	DAD	SP
	PUSH	H
	LXI	H,20
	PUSH	H
	CALL	getline
	POP	B
	POP	B
	CALL	prnt_1
	LXI	H,.oe+21
	PUSH	H
	CALL	prnt_2
	POP	B
	LXI	H,24
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	PUSH	H
	LXI	H,4
	DAD	SP
	PUSH	H
	LXI	H,.oe+50
	PUSH	H
	CALL	fopen
	POP	B
	POP	B
	CALL	q.##
	LXI	H,24
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	LXI	D,32767
	MOV	A,H
	XRI	128
	MOV	H,A
	DAD	D
	JNC	.te
	CALL	prnt_1
	LXI	H,.oe+53
	PUSH	H
	LXI	H,4
	DAD	SP
	PUSH	H
	CALL	prnt_2
	POP	B
	POP	B
	CALL	getchar
	PUSH	H
	CALL	toupper
	POP	B
	LXI	D,-89
	DAD	D
	MOV	A,H
	ORA	L
	JNZ	.ue
	CALL	prnt_1
	LXI	H,.oe+72
	PUSH	H
	CALL	prnt_2
	POP	B
	LXI	H,24
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	PUSH	H
	CALL	fclose
	POP	B
	LXI	H,2
	DAD	SP
	PUSH	H
	CALL	unlink
	POP	B
	LXI	H,24
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	PUSH	H
	LXI	H,4
	DAD	SP
	PUSH	H
	LXI	H,.oe+89
	PUSH	H
	CALL	fopen
	POP	B
	POP	B
	CALL	q.##
	CALL	c.not##
	JZ	.ve
	CALL	prnt_1
	LXI	H,.oe+92
	PUSH	H
	CALL	prnt_2
	POP	B
	LXI	H,26
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	MVI	M,0
	INX	H
	MVI	M,0
.ve:	DS	0
.ue:	JMP	.we
.te:	CALL	prnt_1
	LXI	H,.oe+109
	PUSH	H
	CALL	prnt_2
	POP	B
	LXI	H,24
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	PUSH	H
	LXI	H,4
	DAD	SP
	PUSH	H
	LXI	H,.oe+89
	PUSH	H
	CALL	fopen
	POP	B
	POP	B
	CALL	q.##
	LXI	H,24
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	MOV	A,H
	ORA	L
	JNZ	.xe
	CALL	prnt_1
	LXI	H,.oe+128
	PUSH	H
	LXI	H,4
	DAD	SP
	PUSH	H
	CALL	prnt_2
	POP	B
	POP	B
	LXI	H,26
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	MVI	M,0
	INX	H
	MVI	M,0
.xe:	DS	0
.we:	LXI	H,26
	DAD	SP
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	MOV	A,M
	INX	H
	MOV	H,M
	MOV	L,A
	DCX	H
	MOV	A,H
	ORA	L
	JNZ	.ye
	LXI	H,statlin
	PUSH	H
	CALL	strlen
	POP	B
	SHLD	.pe
.bf:	LHLD	.pe
	LXI	D,32751
	MOV	A,H
	XRI	128
	MOV	H,A
	DAD	D
	JC	.af
	JMP	.cf
.ze:	LHLD	.pe
	INX	H
	SHLD	.pe
	DCX	H
	JMP	.bf
.cf:	LHLD	.pe
	LXI	D,statlin
	DAD	D
	MVI	M,32
	JMP	.ze
.af:	LXI	H,0
	MOV	A,L
	STA	statlin+17
	LXI	H,statlin
	PUSH	H
	LXI	H,4
	DAD	SP
	PUSH	H
	CALL	strcat
	POP	B
	POP	B
	CALL	Stat25
.ye:	DS	0
.se:	DS	0
.df:	POP	H
	SHLD	.pe
	LXI	H,20
	DAD	SP
	SPHL
	RET
.oe:
	DB	10
	DB	'Closing Capture File'
	DB	10
	DB	0
	DB	10
	DB	'Capture Buffer Filename? '
	DB	0
	DB	'ub'
	DB	0
	DB	'Overwrite %s (Y)? '
	DB	0
	DB	10
	DB	'Overwriting...'
	DB	10
	DB	0
	DB	'wb'
	DB	0
	DB	'File Open Error'
	DB	10
	DB	0
	DB	10
	DB	'Opening new file'
	DB	10
	DB	0
	DB	'ERROR! - Can'
	DB	39
	DB	't open file %s'
	DB	10
	DB	0

	PUBLIC	ei

ei:	DS	0
;#asm
    ei
;#endasm
	RET

	PUBLIC	di

di:	DS	0
;#asm
    di
;#endasm
	RET
	EXTRN	slow
	EXTRN	SetBaud
	EXTRN	ReadFil
	EXTRN	SendFil
	EXTRN	SetYmod
	EXTRN	Fast
	EXTRN	puts
	EXTRN	fast
	EXTRN	FlushCo
	EXTRN	prnt_1
	EXTRN	prnt_2
	EXTRN	toupper
	EXTRN	GetCon
	EXTRN	putchar
	EXTRN	index
	EXTRN	Slow
	EXTRN	gotoXY
	EXTRN	set_cli
	EXTRN	Istatus
	EXTRN	rcvchar
	EXTRN	Send
	EXTRN	ResetDT
	EXTRN	alloc
	EXTRN	exit
	EXTRN	Setup
	EXTRN	strcpy
	EXTRN	write
	EXTRN	fclose
	EXTRN	getline
	EXTRN	fopen
	EXTRN	getchar
	EXTRN	unlink
	EXTRN	strlen
	EXTRN	strcat
	EXTRN	g.
	END
                                                              